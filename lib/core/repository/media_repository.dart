// core/repository/media_repository.dart
import 'dart:io' show File;
import 'package:dio/dio.dart' as diox;
import 'package:travelogue_mobile/core/constants/endpoints.dart';
import 'package:travelogue_mobile/core/repository/base_repository.dart';

class MediaRepository {
  final BaseRepository _base = BaseRepository();

  /// Upload nhi·ªÅu ch·ª©ng ch·ªâ: field name b·∫Øt bu·ªôc = `certifications`
  Future<List<String>> uploadMultipleCertifications(List<File> files) async {
    return _uploadMany(
      files: files,
      endpoint: Endpoints.uploadMultipleCertifications,
      fieldName: 'certifications',
      logLabel: 'certifications',
    );
  }

  /// Upload nhi·ªÅu ·∫£nh: field name b·∫Øt bu·ªôc = `images` (theo Swagger)
  Future<List<String>> uploadMultipleImages(List<File> files) async {
    return _uploadMany(
      files: files,
      endpoint: Endpoints.uploadMultipleImages,
      fieldName: 'images',
      logLabel: 'images',
    );
  }

  /// Core uploader: t√°i s·ª≠ d·ª•ng cho m·ªçi field/endpoint
  Future<List<String>> _uploadMany({
    required List<File> files,
    required String endpoint,
    required String fieldName,
    required String logLabel,
  }) async {
    if (files.isEmpty) {
      throw ArgumentError('Danh s√°ch files r·ªóng');
    }

    // B·∫°n c√≥ th·ªÉ th√™m c√°c validate kh√°c n·∫øu mu·ªën:
    // - size limit
    // - mime-type

    print('[üì§] Upload ${files.length} $logLabel ‚Üí $endpoint (field="$fieldName")');

    final form = diox.FormData();

    // D·∫°ng array multipart: l·∫∑p l·∫°i c√πng 1 key nhi·ªÅu l·∫ßn
    for (final f in files) {
      final filename = f.path.split('/').last;
      form.files.add(MapEntry(
        fieldName,
        await diox.MultipartFile.fromFile(
          f.path,
          filename: filename,
        ),
      ));
    }

    print('[‚ÑπÔ∏è] FormData files count: ${form.files.length} (key="$fieldName")');

    final res = await _base.postFormData(endpoint, form);

    print('[üì•] Status: ${res.statusCode}');
    print('[üì•] Data: ${res.data}');

    final root = res.data;
    final data = (root is Map) ? (root['data'] ?? root['Data']) : null;

    if (res.statusCode == 200 && data != null) {
      return _extractUrls(data);
    }

    // fallback: ƒë√¥i khi API tr·∫£ tr·ª±c ti·∫øp array top-level
    if (res.statusCode == 200 && root is List) {
      return _extractUrls(root);
    }

    throw Exception('Upload th·∫•t b·∫°i: ${res.statusCode} ${res.data}');
  }

  List<String> _extractUrls(dynamic data) {
    // Ph·ªï bi·∫øn: data l√† List<String> ho·∫∑c List<Map>
    if (data is List) {
      final urls = <String>[];
      for (final item in data) {
        if (item is String) {
          urls.add(item);
        } else if (item is Map) {
          final u = (item['url'] ??
                  item['URL'] ??
                  item['path'] ??
                  item['location'] ??
                  item['Location'])
              ?.toString();
          if (u != null) urls.add(u);
        }
      }
      print('[‚úÖ] Upload th√†nh c√¥ng: ${urls.length} URL');
      return urls;
    }

    // √çt g·∫∑p: { urls: [...] }
    if (data is Map && data['urls'] is List) {
      final urls = (data['urls'] as List).map((e) => e.toString()).toList();
      print('[‚úÖ] Upload th√†nh c√¥ng: ${urls.length} URL');
      return urls;
    }

    print('[‚ö†Ô∏è] ƒê·ªãnh d·∫°ng data kh√¥ng kh·ªõp k·ª≥ v·ªçng: $data');
    return const <String>[];
  }
}
