import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'package:characters/characters.dart';

import 'package:travelogue_mobile/core/repository/home_repository.dart';
import 'package:travelogue_mobile/model/chatbot/location_dto.dart';
import 'package:travelogue_mobile/model/location_model.dart';
import 'package:travelogue_mobile/model/chatbot/location_mapper.dart';

class ChatbotService {
  final HomeRepository homeRepository;
  final String openAiApiKey;

  List<LocationDto> _cache = [];
  bool _loaded = false;

  ChatbotService({
    required this.homeRepository,
    required this.openAiApiKey,
  });

  Future<void> _ensureLoaded() async {
    if (_loaded) return;
    final list = await homeRepository.getAllLocation();
    print('üì° Loaded ${list.length} locations t·ª´ BE');
    _cache = list.map((LocationModel m) => m.toDto()).toList();
    _loaded = true;
  }

  String _strip(String input) {
    const Map<String, String> map = {
      '√†':'a','√°':'a','·∫£':'a','√£':'a','·∫°':'a','ƒÉ':'a','·∫Ø':'a','·∫±':'a','·∫≥':'a','·∫µ':'a','·∫∑':'a',
      '√¢':'a','·∫•':'a','·∫ß':'a','·∫©':'a','·∫´':'a','·∫≠':'a','ƒë':'d',
      '√®':'e','√©':'e','·∫ª':'e','·∫Ω':'e','·∫π':'e','√™':'e','·∫ø':'e','·ªÅ':'e','·ªÉ':'e','·ªÖ':'e','·ªá':'e',
      '√¨':'i','√≠':'i','·ªâ':'i','ƒ©':'i','·ªã':'i',
      '√≤':'o','√≥':'o','·ªè':'o','√µ':'o','·ªç':'o','√¥':'o','·ªë':'o','·ªì':'o','·ªï':'o','·ªó':'o','·ªô':'o',
      '∆°':'o','·ªõ':'o','·ªù':'o','·ªü':'o','·ª°':'o','·ª£':'o',
      '√π':'u','√∫':'u','·ªß':'u','≈©':'u','·ª•':'u','∆∞':'u','·ª©':'u','·ª´':'u','·ª≠':'u','·ªØ':'u','·ª±':'u',
      '·ª≥':'y','√Ω':'y','·ª∑':'y','·ªπ':'y','·ªµ':'y',
    };
    final lower = input.toLowerCase();
    final buf = StringBuffer();
    for (final ch in lower.characters) {
      buf.write(map[ch] ?? ch);
    }
    return buf.toString().replaceAll(RegExp(r'\s+'), ' ').trim();
  }

  bool _containsAny(String normalized, Set<String> vocab) {
    for (final k in vocab) {
      if (normalized.contains(k)) return true;
    }
    return false;
  }

  // ---------- Guard: ngo√†i h·ªá th·ªëng ----------
  static const _banned = {
    // Th·ªùi ti·∫øt/kh√≠ h·∫≠u
    'th·ªùi ti·∫øt','nhi·ªát ƒë·ªô','m∆∞a','n·∫Øng','b√£o','d·ª± b√°o',
    // T√†i ch√≠nh
    't·ª∑ gi√°','gi√° v√†ng','bitcoin','ch·ª©ng kho√°n','coin','crypto','c·ªï phi·∫øu','l√£i su·∫•t',
    // Tin t·ª©c/ch√≠nh tr·ªã/x√£ h·ªôi
    'tin t·ª©c','ch√≠nh tr·ªã','x√£ h·ªôi','chi·∫øn tranh','bi·ªÉu t√¨nh',
    // Th·ªÉ thao/gi·∫£i tr√≠
    'b√≥ng ƒë√°','world cup','euro','tennis','esports','anime','phim','ca sƒ©','idol','showbiz',
    // Gi√°o d·ª•c/y t·∫ø
    'ƒëi·ªÉm thi','thi ƒë·∫°i h·ªçc','b√†i t·∫≠p','thu·ªëc','b·ªánh',
    // Mua s·∫Øm
    'gi·∫£m gi√°','khuy·∫øn m√£i','mua ·ªü ƒë√¢u','ƒë·∫∑t h√†ng','ship','tiki','shopee','lazada',
  };

  static const _whitelist = {
    'ƒë·ªãa ƒëi·ªÉm','ƒëi·ªÉm ƒë·∫øn','tham quan','du l·ªãch','tour','l·ªô tr√¨nh','l·ªãch tr√¨nh',
    'gi·ªù m·ªü','gi·ªù ƒë√≥ng','m·ªü c·ª≠a','ƒë√≥ng c·ª≠a','ƒë·ªãa ch·ªâ','b·∫£n ƒë·ªì','t·ªça ƒë·ªô',
    'gi√° v√©','ph√≠ v√†o c·ªïng','ƒÉn g√¨','qu√°n ƒÉn','ƒë·∫∑c s·∫£n','nh√† h√†ng','kh√°ch s·∫°n',
    't√¢y ninh','cao ƒë√†i','b√† ƒëen','m·ªôc b√†i','tr·∫£ng b√†ng','t√¢n bi√™n','g√≤ d·∫ßu',
  };

  bool _outOfDomain(String q, {required bool hasHits}) {
    // N·∫øu ƒë√£ c√≥ hits t·ª´ d·ªØ li·ªáu ‚Üí coi l√† trong h·ªá th·ªëng
    if (hasHits) return false;

    final s = _strip(q);
    final bannedAll = _banned.map((e) => _strip(e)).toSet();
    final whiteAll  = _whitelist.map((e) => _strip(e)).toSet();

    final bannedHit = _containsAny(s, bannedAll);
    final whiteHit  = _containsAny(s, whiteAll);

    if (bannedHit && !whiteHit) return true;

    // Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p + kh√¥ng r√µ intent ‚Üí coi l√† ngo√†i h·ªá th·ªëng
    return true;
  }

  // ---------- Search n·ªôi b·ªô ----------
  List<LocationDto> _search(String q) {
    final nq = q.toLowerCase().trim();
    return _cache.where((x) {
      final hay = [
        x.name, x.description, x.address, x.category, x.districtName
      ].join(' ').toLowerCase();
      return hay.contains(nq);
    }).toList();
  }

  List<LocationDto> _onlyTayNinh() {
    return _cache.where((x) {
      final dn = x.districtName.toLowerCase();
      final ad = x.address.toLowerCase();
      return dn.contains('t√¢y ninh') || ad.contains('t√¢y ninh');
    }).toList();
  }

  // ---------- Prompt ----------
  static const _SYS = '''
B·∫°n l√† chatbot du l·ªãch c·ªßa Travelogue.
CH·ªà tr·∫£ l·ªùi d·ª±a tr√™n CONTEXT (d∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu t·ª´ h·ªá th·ªëng).
N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ho·∫∑c th√¥ng tin kh√¥ng c√≥ trong CONTEXT,
tr·∫£ nguy√™n vƒÉn: "Kh√¥ng n·∫±m trong h·ªá th·ªëng." Kh√¥ng th√™m g√¨ kh√°c.
N·∫øu ng∆∞·ªùi d√πng xin "t·∫•t c·∫£ ƒë·ªãa ƒëi·ªÉm", li·ªát k√™ g·∫°ch ƒë·∫ßu d√≤ng:
- T√™n ‚Äì ƒê·ªãa ch·ªâ ‚Äì (Gi·ªù m·ªü: HH:mm, Gi·ªù ƒë√≥ng: HH:mm)
''';

  // ---------- H·ªèi ƒë√°p ----------
  Future<String> ask(String question) async {
    await _ensureLoaded();

    final qLower = question.toLowerCase();
    final askAll = qLower.contains('t·∫•t c·∫£') && qLower.contains('ƒë·ªãa ƒëi·ªÉm');

    final hits = askAll ? _onlyTayNinh() : _search(question);
    final hasHits = hits.isNotEmpty;

    // Guard ngo√†i h·ªá th·ªëng + log nh√°nh return s·ªõm
    if (_outOfDomain(question, hasHits: hasHits)) {
      print('‚õî Out-of-domain ‚Üí kh√¥ng g·ªçi OpenAI | Q="$question" | hasHits=$hasHits');
      return 'Kh√¥ng n·∫±m trong h·ªá th·ªëng.';
    }
    if (!hasHits) {
      print('üîé Kh√¥ng t√¨m th·∫•y hits trong d·ªØ li·ªáu ‚Üí kh√¥ng g·ªçi OpenAI.');
      return 'Kh√¥ng n·∫±m trong h·ªá th·ªëng.';
    }

    final ctx = hits.take(40).map((e) => e.forContext()).toList();

    final messages = [
      {"role": "system", "content": _SYS},
      {"role": "user", "content": "CONTEXT:\n${jsonEncode(ctx)}\n\nC√ÇU H·ªéI: $question"}
    ];

    // G·ªçi OpenAI (in log b·∫±ng print + preview body)
    try {
      print('‚û°Ô∏è G·ªçi OpenAI chat.completions‚Ä¶');
      final res = await http.post(
        Uri.parse('https://api.openai.com/v1/chat/completions'),
        headers: {
          'Authorization': 'Bearer $openAiApiKey',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          "model": "gpt-4o-mini",
          "temperature": 0.2,
          "max_tokens": 700,
          "messages": messages
        }),
      );

      print('üîå OpenAI status: ${res.statusCode}');
      final previewLen = min(500, res.body.length);
      print('üì¶ OpenAI body (preview $previewLen): ${res.body.substring(0, previewLen)}');

      // Fallback n·∫øu API l·ªói
      if (res.statusCode != 200) {
        if (askAll) {
          final lines = ctx.map((e) =>
            "- ${e['name']} ‚Äì ${e['address']} (Gi·ªù m·ªü: ${e['openTime']}, ƒë√≥ng: ${e['closeTime']})");
          return lines.join('\n');
        }
        return 'Kh√¥ng n·∫±m trong h·ªá th·ªëng.';
      }

      final data = jsonDecode(res.body);
      final content = (data['choices']?[0]?['message']?['content'] ?? '').toString().trim();

      if (content.isEmpty || content.toLowerCase().contains('kh√¥ng n·∫±m trong h·ªá th·ªëng')) {
        if (askAll) {
          final lines = ctx.map((e) =>
            "- ${e['name']} ‚Äì ${e['address']} (Gi·ªù m·ªü: ${e['openTime']}, ƒë√≥ng: ${e['closeTime']})");
          return lines.join('\n');
        }
        return 'Kh√¥ng n·∫±m trong h·ªá th·ªëng.';
      }
      return content;
    } catch (e) {
      print('‚ùå L·ªói khi g·ªçi OpenAI: $e');
      if (askAll) {
        final lines = ctx.map((e) =>
          "- ${e['name']} ‚Äì ${e['address']} (Gi·ªù m·ªü: ${e['openTime']}, ƒë√≥ng: ${e['closeTime']})");
        return lines.join('\n');
      }
      return 'Kh√¥ng n·∫±m trong h·ªá th·ªëng.';
    }
  }
}
