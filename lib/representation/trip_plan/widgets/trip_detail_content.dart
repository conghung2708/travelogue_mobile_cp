import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:sizer/sizer.dart';
import 'package:intl/intl.dart';

import 'package:travelogue_mobile/model/args/base_trip_model.dart';
import 'package:travelogue_mobile/model/tour_guide_test_model.dart';

import 'package:travelogue_mobile/representation/trip_plan/widgets/tour_guide_profile_card.dart';
import 'package:travelogue_mobile/representation/trip_plan/widgets/trip_overview_header.dart';
import 'package:travelogue_mobile/representation/trip_plan/widgets/timeline_card_item.dart';

class TripDetailContent extends StatelessWidget {
  final BaseTrip trip;
  final List<DateTime> days;
  final NumberFormat currencyFormat;
  final List locations;
  final List cuisines;
  final List villages;
  final TourGuideTestModel? guide;
  final void Function(BaseTrip updatedTrip)? onUpdated;

  

  const TripDetailContent({
    super.key,
    required this.trip,
    required this.days,
    required this.currencyFormat,
    required this.locations,
    required this.cuisines,
    required this.villages,
      this.guide,
        this.onUpdated,
  });

  final String _travelogueNoticeMarkdown = """
### üìå **L∆∞u √Ω khi tham gia tour kh√°m ph√° T√¢y Ninh c√πng Travelogue**

Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h√†nh tr√¨nh kh√°m ph√° m·∫£nh ƒë·∫•t T√¢y Ninh ‚Äì n∆°i giao thoa gi·ªØa n√∫i non h√πng vƒ©, vƒÉn h√≥a t√¢m linh ƒë·∫∑c s·∫Øc v√† ·∫©m th·ª±c d√¢n d√£ kh√≥ qu√™n. ƒê·ªÉ chuy·∫øn ƒëi di·ªÖn ra thu·∫≠n l·ª£i, an to√†n v√† tr·ªçn v·∫πn, **Travelogue xin g·ª≠i ƒë·∫øn b·∫°n m·ªôt s·ªë l∆∞u √Ω quan tr·ªçng sau**:

#### 1. üìÑ **Gi·∫•y t·ªù t√πy th√¢n**
- Vui l√≤ng mang theo **CMND/CCCD** ho·∫∑c **h·ªô chi·∫øu** b·∫£n ch√≠nh ƒë·ªÉ ti·ªán cho vi·ªác check-in kh√°ch s·∫°n, c√°c ƒëi·ªÉm tham quan c√≥ y√™u c·∫ßu.
- ƒê·ªëi v·ªõi tr·∫ª em, c·∫ßn mang theo **gi·∫•y khai sinh b·∫£n sao c√¥ng ch·ª©ng** n·∫øu kh√¥ng ƒëi c√πng cha m·∫π.

#### 2. üß• **Trang ph·ª•c v√† h√†nh trang**
- T√¢y Ninh c√≥ kh√≠ h·∫≠u n·∫Øng nhi·ªÅu, ban ng√†y kh√° n√≥ng, ban ƒë√™m d·ªãu nh·∫π. N√™n chu·∫©n b·ªã:
  - Qu·∫ßn √°o tho√°ng m√°t, h√∫t m·ªì h√¥i t·ªët
  - **√Åo kho√°c nh·∫π**, **n√≥n**, **k√≠nh m√°t**, **kem ch·ªëng n·∫Øng**
  - Gi√†y th·ªÉ thao ho·∫∑c sandal m·ªÅm ƒë·ªÉ thu·∫≠n ti·ªán di chuy·ªÉn v√† leo n√∫i B√† ƒêen

#### 3. üíä **S·ª©c kh·ªèe v√† thu·ªëc c√° nh√¢n**
- N·∫øu b·∫°n c√≥ ti·ªÅn s·ª≠ **d·ªã ·ª©ng**, **cao huy·∫øt √°p**, **tim m·∫°ch**... vui l√≤ng th√¥ng b√°o v·ªõi tr∆∞·ªüng ƒëo√†n tr∆∞·ªõc khi kh·ªüi h√†nh.
- Mang theo thu·ªëc c√° nh√¢n nh∆∞: thu·ªëc say xe, thu·ªëc c·∫£m, thu·ªëc ƒëau b·ª•ng, d·∫ßu gi√≥‚Ä¶

#### 4. üï∞ **ƒê√∫ng gi·ªù ‚Äì t√¥n tr·ªçng t·∫≠p th·ªÉ**
- Tour ho·∫°t ƒë·ªông theo l·ªãch tr√¨nh c·ª• th·ªÉ ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫£i nghi·ªám t·ªëi ƒëa. Vui l√≤ng **c√≥ m·∫∑t ƒë√∫ng gi·ªù t·∫°i ƒëi·ªÉm h·∫πn**.
- N·∫øu ƒë·∫øn tr·ªÖ qu√° th·ªùi gian cho ph√©p, xe s·∫Ω kh·ªüi h√†nh ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn t·∫≠p th·ªÉ.

#### 5. üì∑ **B·∫£o qu·∫£n t√†i s·∫£n v√† thi·∫øt b·ªã**
- Gi·ªØ c·∫©n th·∫≠n v√≠ ti·ªÅn, ƒëi·ªán tho·∫°i, m√°y ·∫£nh. Kh√¥ng n√™n mang theo qu√° nhi·ªÅu t√†i s·∫£n c√≥ gi√° tr·ªã.
- T·∫°i c√°c ƒëi·ªÉm ƒë√¥ng ng∆∞·ªùi nh∆∞ ch√πa B√† ƒêen, khu v·ª±c l·ªÖ h·ªôi‚Ä¶ h√£y ch√∫ √Ω ƒë·∫øn t∆∞ trang.

#### 6. üîï **T√¥n tr·ªçng vƒÉn h√≥a ‚Äì gi·ªØ g√¨n m√¥i tr∆∞·ªùng**
- T√¢y Ninh l√† v√πng ƒë·∫•t t√¢m linh, xin **ƒÉn m·∫∑c k√≠n ƒë√°o**, **kh√¥ng n√≥i l·ªõn**, **kh√¥ng x·∫£ r√°c** t·∫°i ƒë·ªÅn ch√πa.
- H√£y c√πng Travelogue **tr·ªü th√†nh du kh√°ch vƒÉn minh** ‚Äì l·ªãch s·ª±, th√¢n thi·ªán v√† t√¥n tr·ªçng b·∫£n ƒë·ªãa.

---

Chuy·∫øn ƒëi kh√¥ng ch·ªâ l√† h√†nh tr√¨nh th·ªÉ ch·∫•t, m√† c√≤n l√† h√†nh tr√¨nh t√¢m h·ªìn.  
**Ch√∫c b·∫°n c√≥ m·ªôt tr·∫£i nghi·ªám tuy·ªát v·ªùi, ƒë·∫ßy nƒÉng l∆∞·ª£ng v√† b√¨nh an c√πng Travelogue!**
""";

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        TripOverviewHeader(
          trip: trip,
          days: days,
          currencyFormat: currencyFormat,
           guideStatus: guide?.status,
            onUpdated: onUpdated, 
        ),
        DefaultTabController(
          length: 3,
          child: Column(
            children: [
              TabBar(
                labelColor: Colors.blue,
                unselectedLabelColor: Colors.black45,
                labelStyle: TextStyle(fontSize: 13.5.sp),
                tabs: const [
                  Tab(text: 'Chi ti·∫øt Tour'),
                  Tab(text: 'L∆∞u √Ω'),
                  Tab(text: 'Tr∆∞·ªüng ƒëo√†n'),
                ],
              ),
              SizedBox(
                height: 60.h,
                child: TabBarView(
                  children: [
                    _buildTimeline(),
                    _buildMarkdownNotice(context),
                    _buildTourGuideInfo(),
                  ],
                ),
              )
            ],
          ),
        )
      ],
    );
  }

  Widget _buildTimeline() {
    return ListView.builder(
      itemCount: days.length,
      shrinkWrap: true,
      physics: const ClampingScrollPhysics(),
      itemBuilder: (context, index) {
        final day = days[index];
        final items = [
          ...locations.where((e) => _isSameDay(e.startTime, day)),
          ...cuisines.where((e) => _isSameDay(e.startTime, day)),
          ...villages.where((e) => _isSameDay(e.startTime, day)),
        ];
        items.sort((a, b) => a.startTime.compareTo(b.startTime));

        final timeGroups = <String, List<dynamic>>{};
        for (var item in items) {
          final label = _getTimeLabel(item.startTime);
          timeGroups.putIfAbsent(label, () => []).add(item);
        }

  final allWithoutTime = items.every((item) => item.startTime.hour == 0);

return Card(
  margin: EdgeInsets.symmetric(vertical: 1.h),
  color: Colors.blue.shade50,
  child: ExpansionTile(
    maintainState: true,
    title: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('Ng√†y ${index + 1}',
            style: TextStyle(
                color: Colors.blue,
                fontWeight: FontWeight.bold,
                fontSize: 14.sp)),
        Text(DateFormat('EEEE, dd MMM yyyy', 'vi').format(day),
            style: TextStyle(fontSize: 13.sp, color: Colors.grey)),
      ],
    ),
    children: [
      if (allWithoutTime)
        Padding(
          padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 1.h),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: items.map((item) => TimelineCardItem(item: item)).toList(),
          ),
        )
      else
        ..._groupByTimeLabel(items).entries.map((entry) {
          return Padding(
            padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 1.h),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(entry.key,
                    style: TextStyle(
                        fontSize: 20.sp,
                        fontWeight: FontWeight.bold,
                        color: Colors.blueAccent,
                        fontFamily: "Pattaya")),
                ...entry.value
                    .map((item) => TimelineCardItem(item: item))
                    .toList(),
              ],
            ),
          );
        }),
    ],
  ),
);
      },
    );
  }

  Widget _buildMarkdownNotice(BuildContext context) {
    return SingleChildScrollView(
      padding: EdgeInsets.all(3.w),
      child: MarkdownBody(
        data: _travelogueNoticeMarkdown,
        styleSheet: MarkdownStyleSheet.fromTheme(Theme.of(context)).copyWith(
          p: TextStyle(fontSize: 14.sp),
          h2: TextStyle(fontSize: 15.sp, fontWeight: FontWeight.bold),
          h3: TextStyle(
              fontSize: 14.sp,
              fontWeight: FontWeight.w600,
              color: Colors.blueAccent),
          listBullet: TextStyle(fontSize: 12.sp),
        ),
      ),
    );
  }

  Widget _buildTourGuideInfo() {
    if (trip.tourGuide != null) {
      return TourGuideProfileCard(guide: trip.tourGuide!);
    } else {
      return Padding(
        padding: EdgeInsets.all(4.w),
        child: Text(
          '‚ö†Ô∏è Ch∆∞a c√≥ tr∆∞·ªüng ƒëo√†n ƒë∆∞·ª£c ch·ªçn cho h√†nh tr√¨nh n√†y.',
          style: TextStyle(fontSize: 13.sp, color: Colors.grey),
        ),
      );
    }
  }

Map<String, List<dynamic>> _groupByTimeLabel(List<dynamic> items) {
  items.sort((a, b) => a.startTime.compareTo(b.startTime));
  final Map<String, List<dynamic>> grouped = {};
  for (var item in items) {
    final label = _getTimeLabel(item.startTime);
    grouped.putIfAbsent(label, () => []).add(item);
  }
  return grouped;
}


  String _getTimeLabel(DateTime time) {
    final hour = time.hour;
    if (hour < 11) {
      return 'üåÖ Bu·ªïi s√°ng';
    }
    if (hour < 13) {
      return 'üåû Bu·ªïi tr∆∞a';
    }
    if (hour < 18) {
      return 'üåá Bu·ªïi chi·ªÅu';
    }
    return 'üåÉ Bu·ªïi t·ªëi';
  }

  bool _isSameDay(DateTime a, DateTime b) =>
      a.year == b.year && a.month == b.month && a.day == b.day;
}
