// lib/representation/tour/widgets/tour_detail_content.dart
import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:travelogue_mobile/core/helpers/asset_helper.dart';

import 'package:travelogue_mobile/model/tour/tour_day_model.dart';
import 'package:travelogue_mobile/model/tour/tour_model.dart';
import 'package:travelogue_mobile/model/tour_guide/tour_guide_model.dart';
import 'package:travelogue_mobile/representation/tour/widgets/timeline_card_tour_item.dart';
import 'package:travelogue_mobile/representation/tour/widgets/tour_guide_profile.dart';
import 'package:travelogue_mobile/representation/tour/widgets/tour_overview_header.dart';

class TourDetailContent extends StatelessWidget {
  final TourModel tour;
  final TourGuideModel? guide;
  final bool? readOnly;
  final DateTime? startTime;
  final bool? isBooked;

  const TourDetailContent({
    super.key,
    required this.tour,
    this.guide,
    this.readOnly,
    this.startTime,
    this.isBooked,
  });

  final String _tourNoteMarkdown = """
### üìå **L∆∞u √Ω khi tham gia tour kh√°m ph√° T√¢y Ninh c√πng Travelogue**

Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h√†nh tr√¨nh kh√°m ph√° m·∫£nh ƒë·∫•t T√¢y Ninh ‚Äì n∆°i giao thoa gi·ªØa n√∫i non h√πng vƒ©, vƒÉn h√≥a t√¢m linh ƒë·∫∑c s·∫Øc v√† ·∫©m th·ª±c d√¢n d√£ kh√≥ qu√™n. ƒê·ªÉ chuy·∫øn ƒëi di·ªÖn ra thu·∫≠n l·ª£i, an to√†n v√† tr·ªçn v·∫πn, **Travelogue xin g·ª≠i ƒë·∫øn b·∫°n m·ªôt s·ªë l∆∞u √Ω quan tr·ªçng sau**:

#### 1. üìÑ **Gi·∫•y t·ªù t√πy th√¢n**
- Vui l√≤ng mang theo **CMND/CCCD** ho·∫∑c **h·ªô chi·∫øu** b·∫£n ch√≠nh ƒë·ªÉ ti·ªán cho vi·ªác check-in kh√°ch s·∫°n, c√°c ƒëi·ªÉm tham quan c√≥ y√™u c·∫ßu.
- ƒê·ªëi v·ªõi tr·∫ª em, c·∫ßn mang theo **gi·∫•y khai sinh b·∫£n sao c√¥ng ch·ª©ng** n·∫øu kh√¥ng ƒëi c√πng cha m·∫π.

#### 2. üß• **Trang ph·ª•c v√† h√†nh trang**
- T√¢y Ninh c√≥ kh√≠ h·∫≠u n·∫Øng nhi·ªÅu, ban ng√†y kh√° n√≥ng, ban ƒë√™m d·ªãu nh·∫π. N√™n chu·∫©n b·ªã:
  - Qu·∫ßn √°o tho√°ng m√°t, h√∫t m·ªì h√¥i t·ªët
  - **√Åo kho√°c nh·∫π**, **n√≥n**, **k√≠nh m√°t**, **kem ch·ªëng n·∫Øng**
  - Gi√†y th·ªÉ thao ho·∫∑c sandal m·ªÅm ƒë·ªÉ thu·∫≠n ti·ªán di chuy·ªÉn v√† leo n√∫i B√† ƒêen

#### 3. üíä **S·ª©c kh·ªèe v√† thu·ªëc c√° nh√¢n**
- N·∫øu b·∫°n c√≥ ti·ªÅn s·ª≠ **d·ªã ·ª©ng**, **cao huy·∫øt √°p**, **tim m·∫°ch**... vui l√≤ng th√¥ng b√°o v·ªõi tr∆∞·ªüng ƒëo√†n tr∆∞·ªõc khi kh·ªüi h√†nh.
- Mang theo thu·ªëc c√° nh√¢n nh∆∞: thu·ªëc say xe, thu·ªëc c·∫£m, thu·ªëc ƒëau b·ª•ng, d·∫ßu gi√≥‚Ä¶

#### 4. üï∞ **ƒê√∫ng gi·ªù ‚Äì t√¥n tr·ªçng t·∫≠p th·ªÉ**
- Tour ho·∫°t ƒë·ªông theo l·ªãch tr√¨nh c·ª• th·ªÉ ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫£i nghi·ªám t·ªëi ƒëa. Vui l√≤ng **c√≥ m·∫∑t ƒë√∫ng gi·ªù t·∫°i ƒëi·ªÉm h·∫πn**.
- N·∫øu ƒë·∫øn tr·ªÖ qu√° th·ªùi gian cho ph√©p, xe s·∫Ω kh·ªüi h√†nh ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn t·∫≠p th·ªÉ.

#### 5. üì∑ **B·∫£o qu·∫£n t√†i s·∫£n v√† thi·∫øt b·ªã**
- Gi·ªØ c·∫©n th·∫≠n v√≠ ti·ªÅn, ƒëi·ªán tho·∫°i, m√°y ·∫£nh. Kh√¥ng n√™n mang theo qu√° nhi·ªÅu t√†i s·∫£n c√≥ gi√° tr·ªã.
- T·∫°i c√°c ƒëi·ªÉm ƒë√¥ng ng∆∞·ªùi nh∆∞ ch√πa B√† ƒêen, khu v·ª±c l·ªÖ h·ªôi‚Ä¶ h√£y ch√∫ √Ω ƒë·∫øn t∆∞ trang.

#### 6. üîï **T√¥n tr·ªçng vƒÉn h√≥a ‚Äì gi·ªØ g√¨n m√¥i tr∆∞·ªùng**
- T√¢y Ninh l√† v√πng ƒë·∫•t t√¢m linh, xin **ƒÉn m·∫∑c k√≠n ƒë√°o**, **kh√¥ng n√≥i l·ªõn**, **kh√¥ng x·∫£ r√°c** t·∫°i ƒë·ªÅn ch√πa.
- H√£y c√πng Travelogue **tr·ªü th√†nh du kh√°ch vƒÉn minh** ‚Äì l·ªãch s·ª±, th√¢n thi·ªán v√† t√¥n tr·ªçng b·∫£n ƒë·ªãa.

---

Chuy·∫øn ƒëi kh√¥ng ch·ªâ l√† h√†nh tr√¨nh th·ªÉ ch·∫•t, m√† c√≤n l√† h√†nh tr√¨nh t√¢m h·ªìn.  
**Ch√∫c b·∫°n c√≥ m·ªôt tr·∫£i nghi·ªám tuy·ªát v·ªùi, ƒë·∫ßy nƒÉng l∆∞·ª£ng v√† b√¨nh an c√πng Travelogue!**
""";

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        TourOverviewHeader(
          tour: tour,
          readOnly: readOnly,
          startTime: startTime,
          isBooked: isBooked,
        ),
        DefaultTabController(
          length: 4, 
          child: Column(
            children: [
              TabBar(
                labelColor: Colors.blue,
                unselectedLabelColor: Colors.black45,
                labelStyle: TextStyle(fontSize: 13.5.sp),
                tabs: const [
                  Tab(text: 'Chi ti·∫øt Tour'),
                  Tab(text: 'L∆∞u √Ω'),
                  Tab(text: 'Tr∆∞·ªüng ƒëo√†n'),
                  Tab(text: 'ƒê√°nh gi√°'), 
                ],
              ),
              SizedBox(
                height: 60.h,
                child: TabBarView(
                  children: [
                    _buildDetailTab(context), 
                    _buildMarkdownNotice(context),
                    _buildTourGuideInfo(),
                    _buildReviewsTab(), 
                  ],
                ),
              )
            ],
          ),
        )
      ],
    );
  }

  Widget _buildDetailTab(BuildContext context) {
    return SingleChildScrollView(
      padding: EdgeInsets.symmetric(vertical: 1.h),
      child: Column(
        children: [
          _StartEndStrip(
            startName: tour.startLocation?.name,
            startAddress: tour.startLocation?.address,
            endName: tour.endLocation?.name,
            endAddress: tour.endLocation?.address,
          ),
          SizedBox(height: 1.h),
          _buildTimeline(),
        ],
      ),
    );
  }

  Widget _buildTimeline() {
    final List<TourDayModel> days = tour.days ?? [];

    return ListView.builder(
      itemCount: days.length,
      shrinkWrap: true,
      physics: const ClampingScrollPhysics(),
      itemBuilder: (context, index) {
        final day = days[index];
        final activities = day.activities ?? [];

        return Card(
          margin: EdgeInsets.symmetric(vertical: 1.h, horizontal: 4.w),
          color: Colors.blue.shade50,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: ExpansionTile(
            maintainState: true,
            tilePadding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.5.h),
            childrenPadding: EdgeInsets.only(bottom: 2.h),
            title: Text(
              'Ng√†y ${day.dayNumber ?? index + 1}',
              style: TextStyle(
                color: Colors.blue,
                fontWeight: FontWeight.bold,
                fontSize: 14.sp,
              ),
            ),
            children: activities.map((activity) {
              final imageUrl = activity.imageUrl?.isNotEmpty == true
                  ? activity.imageUrl!
                  : AssetHelper.img_default;

              return Padding(
                padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),
                child: TimelineCardTourItem(
                  item: activity,
                  name: activity.name ?? 'Ho·∫°t ƒë·ªông',
                  imageUrls: [imageUrl],
                  description: activity.description ?? '',
                  duration: activity.duration,
                  note: activity.notes,
                ),
              );
            }).toList(),
          ),
        );
      },
    );
  }

  Widget _buildMarkdownNotice(BuildContext context) {
    return SingleChildScrollView(
      padding: EdgeInsets.all(3.w),
      child: MarkdownBody(
        data: _tourNoteMarkdown,
        styleSheet: MarkdownStyleSheet.fromTheme(Theme.of(context)).copyWith(
          p: TextStyle(fontSize: 14.sp),
        ),
      ),
    );
  }


  Widget _buildTourGuideInfo() {
    if (guide != null) {
      return TourGuideProfile(guide: guide!);
    } else {
      return Padding(
        padding: EdgeInsets.all(4.w),
        child: Text(
          '‚ö†Ô∏è Ch∆∞a c√≥ tr∆∞·ªüng ƒëo√†n ƒë∆∞·ª£c ch·ªçn cho tour n√†y.',
          style: TextStyle(fontSize: 13.sp, color: Colors.grey),
        ),
      );
    }
  }


  Widget _buildReviewsTab() {
    final reviews = tour.reviews ?? [];
    final avg = tour.averageRating;
    final total = tour.totalReviews ?? reviews.length;

    if (reviews.isEmpty) {
      return Center(
        child: Padding(
          padding: EdgeInsets.all(4.w),
          child: Text('Ch∆∞a c√≥ ƒë√°nh gi√° cho tour n√†y',
              style: TextStyle(fontSize: 12.5.sp)),
        ),
      );
    }

    return ListView(
      padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),
      children: [

        Container(
          padding: EdgeInsets.all(3.w),
          decoration: BoxDecoration(
            color: Colors.amber.withOpacity(0.12),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Row(
            children: [
              Icon(Icons.star_rate_rounded,
                  size: 22.sp, color: Colors.amber[800]),
              SizedBox(width: 2.w),
              Text(
                '${avg?.toStringAsFixed(1) ?? '-'} / 5.0',
                style: TextStyle(fontSize: 15.sp, fontWeight: FontWeight.w700),
              ),
              const Spacer(),
              Text('$total ƒë√°nh gi√°',
                  style: TextStyle(fontSize: 12.sp, color: Colors.black54)),
            ],
          ),
        ),
        SizedBox(height: 1.5.h),

        ...reviews.map((r) {
          return Card(
            elevation: 0,
            margin: EdgeInsets.only(bottom: 1.h),
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
            color: Colors.blueGrey.withOpacity(0.05),
            child: ListTile(
              contentPadding:
                  EdgeInsets.symmetric(horizontal: 4.w, vertical: 0.6.h),
              leading: CircleAvatar(
                child: Text((r.userName?.isNotEmpty == true
                    ? r.userName!.substring(0, 1)
                    : '?')),
              ),
              title: Text(r.userName ?? '·∫®n danh',
                  style: const TextStyle(fontWeight: FontWeight.w600)),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(height: 0.5.h),
                  Row(
                    children: List.generate(5, (i) {
                      final filled = (r.rating ?? 0) > i;
                      return Icon(
                        filled ? Icons.star_rounded : Icons.star_border_rounded,
                        size: 16.sp,
                        color: Colors.amber[700],
                      );
                    }),
                  ),
                  SizedBox(height: 0.5.h),
                  Text(r.comment ?? ''),
                ],
              ),
            ),
          );
        }).toList(),
      ],
    );
  }
}

class _StartEndStrip extends StatelessWidget {
  final String? startName;
  final String? startAddress;
  final String? endName;
  final String? endAddress;

  const _StartEndStrip({
    required this.startName,
    required this.startAddress,
    required this.endName,
    required this.endAddress,
  });

  @override
  Widget build(BuildContext context) {
    final hasStart = (startName ?? '').isNotEmpty;
    final hasEnd = (endName ?? '').isNotEmpty;

    if (!hasStart && !hasEnd) {
      return const SizedBox.shrink();
    }

    return Container(
      margin: EdgeInsets.symmetric(horizontal: 4.w, vertical: 1.h),
      padding: EdgeInsets.all(3.w),
      decoration: BoxDecoration(
        color: Colors.green.withOpacity(0.06),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.green.withOpacity(0.2)),
      ),
      child: Column(
        children: [
          if (hasStart)
            _LocRow(
                icon: Icons.flag_circle_rounded,
                label: 'ƒêi·ªÉm b·∫Øt ƒë·∫ßu',
                name: startName!,
                address: startAddress),
          if (hasStart && hasEnd)
            Padding(
              padding: EdgeInsets.symmetric(vertical: 0.6.h),
              child: Divider(height: 0, color: Colors.green.withOpacity(0.2)),
            ),
          if (hasEnd)
            _LocRow(
                icon: Icons.check_circle_rounded,
                label: 'ƒêi·ªÉm k·∫øt th√∫c',
                name: endName!,
                address: endAddress),
        ],
      ),
    );
  }
}

class _LocRow extends StatelessWidget {
  final IconData icon;
  final String label;
  final String name;
  final String? address;

  const _LocRow({
    required this.icon,
    required this.label,
    required this.name,
    this.address,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Icon(icon, color: Colors.green[700]),
        SizedBox(width: 3.w),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(label,
                  style: TextStyle(
                      fontSize: 12.sp,
                      color: Colors.green[700],
                      fontWeight: FontWeight.w600)),
              SizedBox(height: 0.3.h),
              Text(name,
                  style: TextStyle(
                      fontSize: 13.sp, fontWeight: FontWeight.w700)),
              if ((address ?? '').isNotEmpty)
                Text(address!,
                    style: TextStyle(fontSize: 11.sp, color: Colors.black54)),
            ],
          ),
        ),
      ],
    );
  }
}
